package com.example.project.journalists.repository.impl;

import com.example.project.journalists.exception.DaoException;
import com.example.project.journalists.model.entity.Article;
import com.example.project.journalists.model.entity.Category;
import com.example.project.journalists.repository.ArticleRepository;
import com.example.project.journalists.repository.rowMapper.ArticleRowMapper;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.List;
import java.util.Optional;

@Repository
public class ArticleRepositoryImpl implements ArticleRepository {

    private final JdbcTemplate jdbcTemplate;
    private final ArticleRowMapper articleRowMapper;

    private final String FIND_ALL = """
            SELECT a.article_id, a.title, a.content, a.date,
            j.journalist_id, j.name, j.surname, j.photo, j.about, 
            c.category_id, c.category_name
            FROM articles as a
            LEFT JOIN journalists as j ON a.journalist_id = j.journalist_id
            LEFT JOIN article_category as ac ON a.article_id = ac.article_id
            LEFT JOIN categories as c ON c.category_id = ac.category_id
            """;

    private final String FIND_BY_ID = """
            SELECT a.article_id, a.title, a.content, a.date,
            j.journalist_id, j.name, j.surname, j.photo, j.about, 
            c.category_id, c.category_name
            FROM articles as a
            LEFT JOIN journalists as j ON a.journalist_id = j.journalist_id
            LEFT JOIN article_category as ac ON a.article_id = ac.article_id
            LEFT JOIN categories as c ON c.category_id = ac.category_id
            WHERE a.article_id = ?
            """;

    private final String FIND_BY_CATEGORY = """
             SELECT a.article_id, a.title, a.content, a.date,
            j.journalist_id, j.name, j.surname, j.photo, j.about, 
            c.category_id, c.category_name
            FROM articles as a
            LEFT JOIN journalists as j ON a.journalist_id = j.journalist_id
            LEFT JOIN article_category as ac ON a.article_id = ac.article_id
            LEFT JOIN categories as c ON c.category_id = ac.category_id
            WHERE c.category_id = ?
            """;

    private final String INSERT = """
            INSERT INTO articles (journalist_id, title, content, date)
            VALUES (?,?,?,?)
            """;
    private final String INSERT_ARTICLES_CATEGORIES = """
            INSERT INTO article_category (article_id, category_id)
            VALUES (?,?)
            """;
    private final String REMOVE = """
            DELETE FROM articles 
            WHERE article_id = ?
            """;

    private final String UPDATE = """
            UPDATE articles SET journalist_id = ?, title = ?, content = ?, date = ?
            WHERE article_id = ?
            """;

    public ArticleRepositoryImpl(JdbcTemplate jdbcTemplate, ArticleRowMapper articleRowMapper){
        this.jdbcTemplate = jdbcTemplate;
        this.articleRowMapper = articleRowMapper;
    }

    @Override
    public Optional<Article> findById(long id) throws DaoException {
        try {
            List<Article> result = jdbcTemplate.query(FIND_BY_ID, this.articleRowMapper::extractData, id);
            return result.size() == 0 ?
                    Optional.empty() :
                    Optional.of(result.get(0));
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Article insert(Article article) throws DaoException {
        try {
            // It is done to return autogenerated ID from database
            //
            final PreparedStatementCreator psc = new PreparedStatementCreator() {
                public PreparedStatement createPreparedStatement(final Connection connection) throws SQLException {
                    final PreparedStatement ps = connection.prepareStatement( INSERT,
                            Statement.RETURN_GENERATED_KEYS);
                    ps.setLong(1, article.getJournalist().getId());
                    ps.setString(2,article.getTitle());
                    ps.setString(3, article.getContent());
                    ps.setDate(4, Date.valueOf(article.getDate()));
                    return ps;
                }
            };

            KeyHolder keyHolder = new GeneratedKeyHolder();

            jdbcTemplate.update(psc, keyHolder);

            long insertedId = keyHolder.getKey().longValue();
            article.setId(insertedId);

            for(Category category : article.getCategories()){
                jdbcTemplate.update(INSERT_ARTICLES_CATEGORIES, article.getId(), category.getId());
            }

            return article;
            //
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public boolean remove(long id) throws DaoException {
        try {
            int result = jdbcTemplate.update(REMOVE, id);
            return result!=0;
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public List<Article> findAll() throws DaoException {
        try {
            return jdbcTemplate.query(FIND_ALL, this.articleRowMapper::extractData);
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Article update(long id, Article article) throws DaoException {
        try {
            jdbcTemplate.update(UPDATE, article.getJournalist().getId(), article.getTitle(), article.getContent(), Date.valueOf(article.getDate()), id);
            article.setId(id);
            return article;
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public List<Article> findByCategory(long categoryId) throws DaoException {
        try {
            return jdbcTemplate.query(FIND_BY_CATEGORY, this.articleRowMapper::extractData, categoryId);
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }
}
