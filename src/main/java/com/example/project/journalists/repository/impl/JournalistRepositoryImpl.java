package com.example.project.journalists.repository.impl;

import com.example.project.journalists.exception.DaoException;
import com.example.project.journalists.model.entity.Category;
import com.example.project.journalists.model.entity.Journalist;
import com.example.project.journalists.repository.JournalistRepository;
import com.example.project.journalists.repository.rowMapper.JournalistRowMapper;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Optional;

@Repository
public class JournalistRepositoryImpl implements JournalistRepository {

    private final JdbcTemplate jdbcTemplate;
    private final JournalistRowMapper journalistRowMapper;

    public JournalistRepositoryImpl(JdbcTemplate jdbcTemplate, JournalistRowMapper journalistRowMapper) {
        this.jdbcTemplate = jdbcTemplate;
        this.journalistRowMapper = journalistRowMapper;
    }

    private final String FIND_ALL = """
            SELECT journalist_id, name, surname, photo, about
            FROM journalists
            """;

    private final String FIND_BY_ID = """
            SELECT journalist_id, name, surname, photo, about
            FROM journalists
            WHERE journalist_id = ?
            """;

    private final String INSERT = """
            INSERT INTO journalists (name, surname, photo, about)
            VALUES (?,?,?,?)
            """;

    private final String UPDATE = """
            UPDATE journalists SET name = ?, surname = ?, photo = ?,about = ?
            WHERE journalist_id = ?
            """;

    private final String REMOVE = """
            DELETE FROM journalists
            WHERE journalist_id = ?
            """;

    @Override
    public Optional<Journalist> findById(long id) throws DaoException {
        try {
            List<Journalist> result = jdbcTemplate.query(FIND_BY_ID, this.journalistRowMapper::mapRow, id);
            return result.size() == 0 ?
                    Optional.empty() :
                    Optional.of(result.get(0));
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Journalist insert(Journalist journalist) throws DaoException {
        try {
            // It is done to return autogenerated ID from database
            //
            final PreparedStatementCreator psc = new PreparedStatementCreator() {
                public PreparedStatement createPreparedStatement(final Connection connection) throws SQLException {
                    final PreparedStatement ps = connection.prepareStatement( INSERT,
                            Statement.RETURN_GENERATED_KEYS);
                    ps.setString(1, journalist.getName());
                    ps.setString(2, journalist.getSurname());
                    ps.setString(3, journalist.getPhotoURL());
                    ps.setString(4, journalist.getDescription());
                    return ps;
                }
            };

            KeyHolder keyHolder = new GeneratedKeyHolder();

            jdbcTemplate.update(psc, keyHolder);

            long insertedId = keyHolder.getKey().longValue();
            journalist.setId(insertedId);
            return journalist;
            //
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public boolean remove(long id) throws DaoException {
        try {
            int result = jdbcTemplate.update(REMOVE, id);
            return result!=0;
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public List<Journalist> findAll() throws DaoException {
        try {
            return jdbcTemplate.query(FIND_ALL, this.journalistRowMapper::mapRow);
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Journalist update(long id, Journalist journalist) throws DaoException {
        try {
            jdbcTemplate.update(UPDATE, journalist.getName(), journalist.getSurname(),journalist.getPhotoURL(), journalist.getDescription(), id);
            journalist.setId(id);
            return journalist;
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }
}
