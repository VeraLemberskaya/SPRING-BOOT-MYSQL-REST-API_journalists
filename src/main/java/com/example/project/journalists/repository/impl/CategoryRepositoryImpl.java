package com.example.project.journalists.repository.impl;

import com.example.project.journalists.exception.DaoException;
import com.example.project.journalists.model.entity.Category;
import com.example.project.journalists.repository.CategoryRepository;
import com.example.project.journalists.repository.rowMapper.CategoryRowMapper;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Optional;

@Repository
public class CategoryRepositoryImpl implements CategoryRepository {

    private final JdbcTemplate jdbcTemplate;
    private final CategoryRowMapper categoryRowMapper;

    private final String FIND_ALL = """
            SELECT category_id, category_name 
            FROM categories
            """;

    private final String FIND_BY_ID = """
            SELECT category_id, category_name
            FROM categories
            WHERE category_id = ?
            """;

    private final String FIND_BY_NAME = """
            SELECT category_id, category_name
            FROM categories
            WHERE category_name = ?
            """;

    private final String INSERT = """
            INSERT INTO categories (category_name)
            VALUES (?)
            """;

    private final String REMOVE = """
            DELETE FROM categories
            WHERE category_id = ?
            """;

    private final String UPDATE = """
            UPDATE categories SET category_name = ?
            WHERE category_id = ?
            """;

    public CategoryRepositoryImpl(JdbcTemplate jdbcTemplate, CategoryRowMapper categoryRowMapper){
        this.jdbcTemplate = jdbcTemplate;
        this.categoryRowMapper = categoryRowMapper;
    }
    @Override
    public Optional<Category> findById(long id) throws DaoException {
        try {
            List<Category> result = jdbcTemplate.query(FIND_BY_ID, this.categoryRowMapper::mapRow, id);
            return result.size() == 0 ?
                    Optional.empty() :
                    Optional.of(result.get(0));
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Category insert(Category category) throws DaoException {
        try {
            // It is done to return autogenerated ID from database
            //
            final PreparedStatementCreator psc = new PreparedStatementCreator() {
                public PreparedStatement createPreparedStatement(final Connection connection) throws SQLException {
                    final PreparedStatement ps = connection.prepareStatement( INSERT,
                            Statement.RETURN_GENERATED_KEYS);
                    ps.setString(1, category.getName());
                    return ps;
                }
            };

            KeyHolder keyHolder = new GeneratedKeyHolder();

            jdbcTemplate.update(psc, keyHolder);

            long insertedId = keyHolder.getKey().longValue();
            category.setId(insertedId);
            return category;
            //
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public boolean remove(long id) throws DaoException {
        try {
            int result = jdbcTemplate.update(REMOVE, id);
            return result!=0;
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public List<Category> findAll() throws DaoException {
        try {
            return jdbcTemplate.query(FIND_ALL, this.categoryRowMapper::mapRow);
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Category update(long id, Category category) throws DaoException {
        try {
            jdbcTemplate.update(UPDATE, category.getName(), id);
            category.setId(id);
            return category;
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public Optional<Category> findByName(String categoryName) throws DaoException {
        try {
            List<Category> result = jdbcTemplate.query(FIND_BY_NAME, this.categoryRowMapper::mapRow, categoryName);
            return result.size() == 0 ?
                    Optional.empty() :
                    Optional.of(result.get(0));
        } catch (DataAccessException e) {
            throw new DaoException(e);
        }
    }
}
